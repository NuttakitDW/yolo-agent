const fs = require('fs').promises;
const path = require('path');

// Manual mappings for better quality
const sessionHighlights = {
  'garcia-introduction-to-polars': {
    thai: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ Polars library ‡∏ó‡∏µ‡πà‡πÄ‡∏£‡πá‡∏ß‡∏Å‡∏ß‡πà‡∏≤ pandas ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
    eng: 'Learn Polars - the blazing fast alternative to pandas for data analysis'
  },
  'liashkov-spatial-data-science-for-traffic-safety-analyzing-collision-patterns-with-pysal': {
    thai: '‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏ä‡∏¥‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏≤‡∏à‡∏∏‡∏î‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏≠‡∏∏‡∏ö‡∏±‡∏ï‡∏¥‡πÄ‡∏´‡∏ï‡∏∏‡∏î‡πâ‡∏ß‡∏¢ Python',
    eng: 'Analyze spatial data to identify traffic collision hotspots with Python'
  },
  'sandford-overcoming-your-imposter-syndrome-with-github-copilot': {
    thai: '‡πÄ‡∏≠‡∏≤‡∏ä‡∏ô‡∏∞ Imposter Syndrome ‡∏î‡πâ‡∏ß‡∏¢ AI pair programming',
    eng: 'Overcome imposter syndrome using AI-powered pair programming'
  },
  'acosta-ai-driven-automation-in-open-source-metadata-platforms': {
    thai: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ metadata',
    eng: 'Build AI-driven automation for metadata management'
  },
  'anirudha-bringing-python-to-webassembly': {
    thai: '‡∏£‡∏±‡∏ô Python ‡∏ö‡∏ô WebAssembly ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö web apps ‡∏™‡∏°‡∏±‡∏¢‡πÉ‡∏´‡∏°‡πà',
    eng: 'Run Python in WebAssembly for modern web applications'
  },
  'benoy-how-i-ended-up-maintaining-a-python-package-with-1m-downloads': {
    thai: '‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏• Python package ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ñ‡∏ô‡πÉ‡∏ä‡πâ‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏•‡πâ‡∏≤‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á',
    eng: 'Learn how to maintain a Python package with 1M+ downloads'
  },
  'champeethong-boosting-operational-productivity-with-python-and-textual': {
    thai: '‡∏™‡∏£‡πâ‡∏≤‡∏á Terminal UI ‡∏™‡∏ß‡∏¢‡∏á‡∏≤‡∏°‡∏î‡πâ‡∏ß‡∏¢ Python ‡πÅ‡∏•‡∏∞ Textual',
    eng: 'Build beautiful Terminal UIs with Python and Textual'
  },
  'chaowvasin-making-rag-application-with-evaluation-using-ollama': {
    thai: '‡∏™‡∏£‡πâ‡∏≤‡∏á RAG chatbot ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏£‡∏∞‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Ollama',
    eng: 'Build RAG chatbot with evaluation system using Ollama'
  },
  'chiu-how-we-built-an-entire-bank-from-scratch-with-python': {
    thai: '‡πÄ‡∏ö‡∏∑‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£‡∏î‡∏¥‡∏à‡∏¥‡∏ó‡∏±‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Python',
    eng: 'Behind the scenes: Building an entire digital bank with Python'
  },
  'chotepanit-create-agentic-financial-solution-using-mcp-and-a2a': {
    thai: '‡∏û‡∏±‡∏í‡∏ô‡∏≤ AI Agent ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ó‡∏£‡∏î‡∏´‡∏∏‡πâ‡∏ô‡∏î‡πâ‡∏ß‡∏¢ MCP',
    eng: 'Create AI agents for stock trading using MCP'
  },
  'coghlan-do-you-want-to-get-more-involved-in-open-source': {
    thai: '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏°‡∏µ‡∏™‡πà‡∏ß‡∏ô‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö Open Source ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏°‡∏≤‡∏¢',
    eng: 'Start contributing meaningfully to open source'
  },
  'flower-python-portfolios-and-pull-requests-building-a-culture-of-code-in-the-classroom': {
    thai: '‡∏™‡∏≠‡∏ô Python ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏î‡πâ‡∏ß‡∏¢ GitHub workflow',
    eng: 'Teach Python professionally using real GitHub workflows'
  },
  'garcia-whats-new-in-pandas-30': {
    thai: '‡∏ü‡∏µ‡πÄ‡∏à‡∏≠‡∏£‡πå‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏ï‡∏∑‡πà‡∏ô‡πÄ‡∏ï‡πâ‡∏ô‡πÉ‡∏ô pandas 3.0',
    eng: 'Exciting new features coming in pandas 3.0'
  },
  'hirata-how-to-transform-ml-apis-into-an-llm-compatible-mcp-server-with-python': {
    thai: '‡πÅ‡∏õ‡∏•‡∏á ML APIs ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Å‡∏±‡∏ö LLM ‡∏ú‡πà‡∏≤‡∏ô MCP',
    eng: 'Transform ML APIs to work with LLMs via MCP'
  },
  'kharinskii-from-scratch-to-scale-open-source-stack-for-recommendation-systems': {
    thai: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏µ‡πà scale ‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ open source stack',
    eng: 'Build scalable recommendation systems with open source stack'
  },
  'kirillov-deploying-operating-streamlit-web-app-in-azure': {
    thai: 'Deploy Streamlit app ‡∏ö‡∏ô Azure ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
    eng: 'Deploy and operate Streamlit apps on Azure professionally'
  },
  'kothari-revolutionizing-observability-python-logging-for-asynchronous-cloud-native-systems': {
    thai: '‡∏£‡∏∞‡∏ö‡∏ö logging ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö async cloud-native apps',
    eng: 'Advanced logging for async cloud-native applications'
  },
  'lokko-ai-in-open-source-project-management-more-than-just-code': {
    thai: '‡πÉ‡∏ä‡πâ AI ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ open source project ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
    eng: 'Use AI to manage open source projects effectively'
  },
  'mahapatra-peeking-under-the-hood-of-api-instrumentation-agents': {
    thai: '‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á API monitoring tools',
    eng: 'Deep dive into how API instrumentation agents work'
  },
  'merced-open-standards-and-lakehouse-ai-development-arrow-flight-apache-iceberg-and-mcp': {
    thai: '‡∏û‡∏±‡∏í‡∏ô‡∏≤ AI ‡∏ö‡∏ô Data Lakehouse ‡∏î‡πâ‡∏ß‡∏¢ open standards',
    eng: 'Build AI on Data Lakehouse using open standards'
  },
  'misra-whats-really-going-on-in-your-model-a-python-guide-to-explainable-ai': {
    thai: '‡∏ó‡∏≥‡πÉ‡∏´‡πâ AI model ‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÑ‡∏î‡πâ‡∏î‡πâ‡∏ß‡∏¢ Python',
    eng: 'Make your AI models explainable with Python techniques'
  },
  'padinharayil-securing-ai-models-and-ml-pipelines-best-practices-and-pitfalls-to-avoid': {
    thai: '‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ AI/ML pipeline ‡πÅ‡∏ö‡∏ö‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
    eng: 'Secure your AI/ML pipelines like a pro'
  },
  'rathee-pydanticai-demystified-building-smarter-generative-ai-systems': {
    thai: '‡∏™‡∏£‡πâ‡∏≤‡∏á Generative AI ‡∏ó‡∏µ‡πà‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏Å‡∏£‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢ PydanticAI',
    eng: 'Build robust Generative AI systems with PydanticAI'
  },
  'rathnayake-why-python-developers-need-better-platforms-and-what-that-actually-looks-like': {
    thai: 'Platform ‡πÉ‡∏ô‡∏≠‡∏∏‡∏î‡∏°‡∏Ñ‡∏ï‡∏¥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ô‡∏±‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤ Python',
    eng: 'The ideal platform for Python developers'
  },
  'sarmiento-optimizing-dependency-management-and-deployment-for-serverless-python-applications-with-uv-and-pants': {
    thai: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ dependencies ‡πÅ‡∏•‡∏∞ deploy serverless ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
    eng: 'Optimize dependency management and serverless deployment'
  },
  'shershebnev-developing-production-ready-apps-in-collaboration-with-ai-agents': {
    thai: '‡∏û‡∏±‡∏í‡∏ô‡∏≤ production app ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö AI agents',
    eng: 'Develop production-ready apps with AI agents'
  },
  'sripheanpol-best-practices-for-building-graph-based-rag-from-multiple-documents-with-python': {
    thai: '‡∏™‡∏£‡πâ‡∏≤‡∏á Graph RAG ‡∏à‡∏≤‡∏Å‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡∏´‡∏•‡∏≤‡∏¢‡πÑ‡∏ü‡∏•‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
    eng: 'Build efficient Graph RAG from multiple documents'
  },
  'srirattanamet-python-as-a-system-language-how-python-is-used-in-a-linux-system': {
    thai: 'Python ‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö system - ‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô Linux OS',
    eng: 'Python at system level - how it powers Linux'
  },
  'umarye-pings-patterns-python-making-sense-of-300-million-iot-events-a-day': {
    thai: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• IoT 300 ‡∏•‡πâ‡∏≤‡∏ô events ‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Python',
    eng: 'Handle 300 million IoT events daily with Python'
  },
  'vaswani-build-modern-ci-pipelines-in-python': {
    thai: '‡∏™‡∏£‡πâ‡∏≤‡∏á CI/CD pipeline ‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢‡∏î‡πâ‡∏ß‡∏¢ Python',
    eng: 'Build modern CI/CD pipelines with Python'
  },
  'vorathammathorn-building-a-quantum-ai-model-with-python': {
    thai: '‡∏û‡∏±‡∏í‡∏ô‡∏≤ Quantum AI model ‡∏î‡πâ‡∏ß‡∏¢ Python',
    eng: 'Build Quantum AI models with Python'
  }
};

// Get clean role from bio
function getCleanRole(bio) {
  const patterns = [
    /work(?:s|ing)?\s+as\s+(?:a|an)?\s*([^,\.]+?)\s+at\s+([^,\.]+)/i,
    /^([^,\.]+?)\s+at\s+([^,\.]+)/,
    /is\s+(?:a|an)?\s*([^,\.]+?)\s+(?:at|with)\s+([^,\.]+)/i
  ];
  
  for (const pattern of patterns) {
    const match = bio.match(pattern);
    if (match) {
      const role = match[1].trim().replace(/^(a|an|the)\s+/i, '');
      const company = match[2].trim();
      return `${role} @ ${company}`;
    }
  }
  
  // Simpler patterns
  if (bio.includes('core developer')) return 'Core Developer';
  if (bio.includes('Engineer')) return 'Engineer';
  if (bio.includes('Consultant')) return 'Consultant';
  if (bio.includes('Developer')) return 'Developer';
  if (bio.includes('Student')) return 'Student';
  
  return 'Python Expert';
}

// Category emojis
const categoryEmojis = {
  'Machine Learning or AI': 'ü§ñ',
  'System Administration or DevOps': '‚öôÔ∏è',
  'Libraries and Extensions': 'üìö',
  'App Development or Developer Productivity': 'üíª',
  'Web Development': 'üåê',
  'Testing and Development Tool Chains': 'üß™',
  'Social Impact': 'üåç',
  'Serverless': '‚òÅÔ∏è',
  'Python in Education, Science, and Maths': 'üéì',
  'Project Best Practices': '‚ú®',
  'IoT': 'üì°',
  'Embedding and Extending Python': 'üîß',
  'Community': 'ü§ù',
  'Business and Scientific Applications': 'üìä'
};

async function generatePost(sessionFile) {
  const filePath = path.join(__dirname, '../docs/sessions', sessionFile);
  const content = await fs.readFile(filePath, 'utf-8');
  
  // Extract information
  const speakerMatch = content.match(/\*\*Speakers:\*\* (.+)/);
  const titleMatch = content.match(/# (.+)/);
  const categoryMatch = content.match(/\*\*Category:\*\* (.+)/);
  const typeMatch = content.match(/\*\*Session Type:\*\* (.+)/);
  const levelMatch = content.match(/\*\*Level:\*\* (.+)/);
  
  if (!speakerMatch || !titleMatch) return null;
  
  const speakers = speakerMatch[1].split(', ');
  const title = titleMatch[1];
  const category = categoryMatch ? categoryMatch[1] : 'Python';
  const level = levelMatch ? levelMatch[1] : 'All levels';
  const sessionType = typeMatch ? typeMatch[1] : '30-mins talk';
  const isWorkshop = sessionType.includes('workshop');
  
  // Get session key for highlights
  const sessionKey = sessionFile.replace('.md', '');
  const highlight = sessionHighlights[sessionKey] || {
    thai: '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞ Python ‡πÉ‡∏ô‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏û‡∏¥‡πÄ‡∏®‡∏©',
    eng: 'Advance your Python skills in this special topic'
  };
  
  // Get speaker info
  const speakerInfo = [];
  speakers.forEach(speaker => {
    const bioPattern = new RegExp(`### ${speaker.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\n\\n([^#]+?)(?=\\n\\n###|\\n\\n##|$)`, 's');
    const bioMatch = content.match(bioPattern);
    if (bioMatch) {
      speakerInfo.push({
        name: speaker,
        role: getCleanRole(bioMatch[1])
      });
    } else {
      speakerInfo.push({
        name: speaker,
        role: 'Python Expert'
      });
    }
  });
  
  // Get emoji
  const emoji = categoryEmojis[category] || 'üêç';
  
  // Level in Thai
  const levelThai = {
    'Beginner': '‡∏ú‡∏π‡πâ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
    'Intermediate': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á', 
    'Advanced': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á'
  }[level] || '‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö';
  
  // Build the post
  const speakerNames = speakers.join(' & ');
  const mainSpeakerRole = speakerInfo[0].role;
  
  const post = `[English Below]
${emoji} ${isWorkshop ? 'Workshop ‡∏û‡∏¥‡πÄ‡∏®‡∏©!' : '‡∏≠‡∏¢‡πà‡∏≤‡∏û‡∏•‡∏≤‡∏î!'}
üë§ ${speakerNames}
üíº ${mainSpeakerRole}
üìå "${title}"
‚ú® ${highlight.thai}
üéØ ${isWorkshop ? 'Workshop 90 ‡∏ô‡∏≤‡∏ó‡∏µ' : 'Session 30 ‡∏ô‡∏≤‡∏ó‡∏µ'} | ${levelThai}
üéüÔ∏è ‡∏à‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£: https://www.eventpop.me/e/85285/pycon-thailand-2025
.
${emoji} ${isWorkshop ? 'Special Workshop!' : 'Don\'t Miss!'}
üë§ ${speakerNames}
üíº ${mainSpeakerRole}
üìå "${title}"
‚ú® ${highlight.eng}
üéØ ${isWorkshop ? '90-min Workshop' : '30-min Talk'} | ${level}
üéüÔ∏è Book now: https://www.eventpop.me/e/85285/pycon-thailand-2025
.
#pyconth #pyconth2025 #pythonthailand`;
  
  return {
    filename: sessionFile.replace('.md', '-post.md'),
    content: post
  };
}

async function generateAllPosts() {
  const sessionsDir = path.join(__dirname, '../docs/sessions');
  const postsDir = path.join(__dirname, '../posts');
  
  const files = await fs.readdir(sessionsDir);
  const sessionFiles = files.filter(f => f.endsWith('.md') && f !== 'index.md');
  
  let generatedCount = 0;
  
  for (const file of sessionFiles) {
    try {
      const post = await generatePost(file);
      if (post) {
        const postPath = path.join(postsDir, post.filename);
        await fs.writeFile(postPath, post.content);
        console.log(`‚úÖ Generated: ${post.filename}`);
        generatedCount++;
      }
    } catch (error) {
      console.error(`‚ùå Error generating post for ${file}:`, error.message);
    }
  }
  
  console.log(`\nüìä Generated ${generatedCount} posts`);
}

// Run
console.log('üöÄ Generating speaker announcement posts...');
generateAllPosts()
  .then(() => console.log('‚ú® All posts generated successfully!'))
  .catch(error => console.error('üí• Generation failed:', error));