const fs = require('fs').promises;
const path = require('path');

// Better Thai translations and descriptions
const thaiDescriptions = {
  'AI': '‡∏õ‡∏±‡∏ç‡∏ç‡∏≤‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå',
  'Machine Learning': '‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á',
  'WebAssembly': '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ WebAssembly',
  'Database': '‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•',
  'Testing': '‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö',
  'DevOps': 'DevOps',
  'Cloud': '‡∏Ñ‡∏•‡∏≤‡∏ß‡∏î‡πå',
  'Open Source': '‡πÇ‡∏≠‡πÄ‡∏û‡∏ô‡∏ã‡∏≠‡∏£‡πå‡∏™',
  'API': 'API',
  'Workshop': '‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ‡∏ä‡πá‡∏≠‡∏õ',
  'Serverless': 'Serverless',
  'IoT': 'IoT',
  'Data Science': '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏Å‡∏≤‡∏£‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'
};

// Category-specific value props in Thai
const categoryValueProps = {
  'Machine Learning or AI': '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏∞‡∏ö‡∏ö AI ‡∏ó‡∏µ‡πà‡∏ó‡∏£‡∏á‡∏û‡∏•‡∏±‡∏á',
  'System Administration or DevOps': '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏∑‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û',
  'Libraries and Extensions': '‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô Python libraries ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏ï‡πá‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
  'App Development or Developer Productivity': '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô',
  'Web Development': '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ß‡πá‡∏ö‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ó‡∏±‡∏ô‡∏™‡∏°‡∏±‡∏¢',
  'Testing and Development Tool Chains': '‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÇ‡∏Ñ‡πâ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û',
  'Social Impact': '‡πÉ‡∏ä‡πâ Python ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡πÄ‡∏ä‡∏¥‡∏á‡∏ö‡∏ß‡∏Å‡∏ï‡πà‡∏≠‡∏™‡∏±‡∏á‡∏Ñ‡∏°',
  'Serverless': '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏£‡∏∞‡∏ö‡∏ö Serverless ‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏î‡πâ',
  'Python in Education, Science, and Maths': '‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ Python ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£',
  'Project Best Practices': '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏°‡∏µ‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
  'IoT': '‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå IoT ‡∏î‡πâ‡∏ß‡∏¢ Python',
  'Embedding and Extending Python': '‡∏Ç‡∏¢‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ç‡∏≠‡∏á Python',
  'Community': '‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ä‡∏∏‡∏°‡∏ä‡∏ô Python',
  'Business and Scientific Applications': '‡πÉ‡∏ä‡πâ Python ‡πÉ‡∏ô‡∏á‡∏≤‡∏ô‡∏ò‡∏∏‡∏£‡∏Å‡∏¥‡∏à‡πÅ‡∏•‡∏∞‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå'
};

// Emoji mapping
const categoryEmojis = {
  'Machine Learning or AI': 'ü§ñ',
  'System Administration or DevOps': '‚öôÔ∏è',
  'Libraries and Extensions': 'üìö',
  'App Development or Developer Productivity': 'üíª',
  'Web Development': 'üåê',
  'Testing and Development Tool Chains': 'üß™',
  'Social Impact': 'üåç',
  'Serverless': '‚òÅÔ∏è',
  'Python in Education, Science, and Maths': 'üéì',
  'Project Best Practices': '‚ú®',
  'IoT': 'üì°',
  'Embedding and Extending Python': 'üîß',
  'Community': 'ü§ù',
  'Business and Scientific Applications': 'üìä'
};

// Extract concrete learning points from abstract
function extractLearningPoints(abstract, title) {
  const sentences = abstract.split('. ');
  
  // Look for specific learning outcomes
  const learningIndicators = [
    /will (learn|explore|discover|understand|build|create|implement)/i,
    /learn (how to|about)/i,
    /explore (how|the)/i,
    /hands-on/i,
    /practical/i,
    /real-world/i,
    /techniques/i,
    /strategies/i
  ];
  
  for (const sentence of sentences) {
    for (const indicator of learningIndicators) {
      if (indicator.test(sentence)) {
        // Clean up the sentence
        return sentence
          .replace(/^.*?(learn|explore|discover|will|we'll|you'll)/i, '')
          .replace(/^\s*(how\s+to|about)\s*/i, '')
          .trim();
      }
    }
  }
  
  // Extract from title if no clear learning in abstract
  if (title.includes('How to')) {
    return title.replace(/^How to\s+/i, '').toLowerCase();
  }
  
  return null;
}

// Get speaker's main credential (short)
function getSpeakerCredential(bio) {
  // Look for current role
  const rolePatterns = [
    /(?:work(?:s|ing)?|is|am)\s+(?:as\s+)?(?:a|an)?\s*([^,\.]+?)\s+at\s+([^,\.]+)/i,
    /^([^,\.]+?)\s+at\s+([^,\.]+)/i,
    /(?:is|am)\s+(?:a|an)?\s*([^,\.]+?)(?:\.|,|$)/i
  ];
  
  for (const pattern of rolePatterns) {
    const match = bio.match(pattern);
    if (match) {
      const role = match[1].trim();
      const company = match[2] ? match[2].trim() : '';
      
      // Shorten long roles
      const shortRole = role
        .replace(/with.*$/i, '')
        .replace(/who.*$/i, '')
        .replace(/focusing.*$/i, '')
        .replace(/specializing.*$/i, '')
        .trim();
      
      if (company && company.length < 30) {
        return `${shortRole} ‡∏ó‡∏µ‡πà ${company}`;
      }
      return shortRole;
    }
  }
  
  return '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç Python';
}

// Create Thai-friendly title
function createThaiTitle(title) {
  // For technical titles, keep English but add context
  const commonPatterns = {
    'Building': '‡∏™‡∏£‡πâ‡∏≤‡∏á',
    'Introduction to': '‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏Å‡∏±‡∏ö',
    'How to': '‡∏ß‡∏¥‡∏ò‡∏µ',
    'Best Practices': '‡πÅ‡∏ô‡∏ß‡∏ó‡∏≤‡∏á‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏î‡∏µ',
    'Getting Started': '‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏Å‡∏±‡∏ö',
    'Understanding': '‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏à',
    'Implementing': '‡∏û‡∏±‡∏í‡∏ô‡∏≤',
    'Creating': '‡∏™‡∏£‡πâ‡∏≤‡∏á',
    'Deploying': '‡∏ï‡∏¥‡∏î‡∏ï‡∏±‡πâ‡∏á',
    'Managing': '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£',
    'Optimizing': '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û'
  };
  
  // Check if title has common patterns
  for (const [eng, thai] of Object.entries(commonPatterns)) {
    if (title.startsWith(eng)) {
      return title.replace(eng, thai);
    }
  }
  
  return title; // Keep original for technical terms
}

// Generate value proposition based on session type
function generateValueProp(abstract, title, category, isWorkshop) {
  const learning = extractLearningPoints(abstract, title);
  
  if (isWorkshop && learning) {
    return {
      thai: `‡∏ù‡∏∂‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏à‡∏£‡∏¥‡∏á‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á ${learning.substring(0, 60)}`,
      eng: `Hands-on practice with ${learning.substring(0, 60)}`
    };
  }
  
  if (learning) {
    return {
      thai: `‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏ß‡∏¥‡∏ò‡∏µ${learning.substring(0, 60)}`,
      eng: `Learn how to ${learning.substring(0, 60)}`
    };
  }
  
  // Fallback to category-based
  return {
    thai: categoryValueProps[category] || '‡∏û‡∏±‡∏í‡∏ô‡∏≤‡∏ó‡∏±‡∏Å‡∏©‡∏∞ Python ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á',
    eng: `Master ${category.toLowerCase()} techniques`
  };
}

async function generatePost(sessionFile) {
  const filePath = path.join(__dirname, '../docs/sessions', sessionFile);
  const content = await fs.readFile(filePath, 'utf-8');
  
  // Extract all information
  const speakerMatch = content.match(/\*\*Speakers:\*\* (.+)/);
  const titleMatch = content.match(/# (.+)/);
  const categoryMatch = content.match(/\*\*Category:\*\* (.+)/);
  const typeMatch = content.match(/\*\*Session Type:\*\* (.+)/);
  const levelMatch = content.match(/\*\*Level:\*\* (.+)/);
  const abstractMatch = content.match(/## Abstract\n\n(.+?)(?=\n\n##)/s);
  
  if (!speakerMatch || !titleMatch) return null;
  
  const speakers = speakerMatch[1].split(', ');
  const title = titleMatch[1];
  const category = categoryMatch ? categoryMatch[1] : 'Python';
  const level = levelMatch ? levelMatch[1] : 'All levels';
  const sessionType = typeMatch ? typeMatch[1] : '30-mins talk session';
  const abstract = abstractMatch ? abstractMatch[1] : '';
  const isWorkshop = sessionType.includes('workshop');
  
  // Get speaker bios
  const speakerInfos = [];
  speakers.forEach(speaker => {
    const bioPattern = new RegExp(`### ${speaker.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')}\\n\\n([^#]+?)(?=\\n\\n###|\\n\\n##|$)`, 's');
    const bioMatch = content.match(bioPattern);
    if (bioMatch) {
      speakerInfos.push({
        name: speaker,
        bio: bioMatch[1],
        credential: getSpeakerCredential(bioMatch[1])
      });
    } else {
      speakerInfos.push({
        name: speaker,
        bio: '',
        credential: '‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç Python'
      });
    }
  });
  
  // Generate components
  const emoji = categoryEmojis[category] || 'üêç';
  const valueProp = generateValueProp(abstract, title, category, isWorkshop);
  const thaiTitle = createThaiTitle(title);
  
  // Build speaker line
  const speakerLineThai = speakerInfos.map(s => `${s.name} (${s.credential})`).join(' ‡∏£‡πà‡∏ß‡∏°‡∏Å‡∏±‡∏ö ');
  const speakerLineEng = speakers.join(' & ');
  
  // Level indicator
  const levelThai = {
    'Beginner': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô',
    'Intermediate': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏•‡∏≤‡∏á',
    'Advanced': '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á'
  }[level] || '‡∏ó‡∏∏‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö';
  
  // Create the post
  const post = `[English Below]
${emoji} ${isWorkshop ? '‡πÄ‡∏ß‡∏¥‡∏£‡πå‡∏Ñ‡∏ä‡πá‡∏≠‡∏õ‡∏û‡∏¥‡πÄ‡∏®‡∏© 90 ‡∏ô‡∏≤‡∏ó‡∏µ!' : '‡∏û‡∏ö‡∏Å‡∏±‡∏ö‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à!'}
üë§ ${speakerLineThai}
üìå "${thaiTitle}"
‚ú® ${valueProp.thai}
üìä ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö: ${levelThai}
üéüÔ∏è ‡∏à‡∏≠‡∏á‡∏ö‡∏±‡∏ï‡∏£‡πÄ‡∏•‡∏¢: https://www.eventpop.me/e/85285/pycon-thailand-2025
.
${emoji} ${isWorkshop ? 'Special 90-min Workshop!' : 'Don\'t miss this talk!'}
üë§ ${speakerLineEng}  
üìå "${title}"
‚ú® ${valueProp.eng}
üìä Level: ${level}
üéüÔ∏è Get tickets: https://www.eventpop.me/e/85285/pycon-thailand-2025
.
#pyconth #pyconth2025 #pythonthailand${isWorkshop ? ' #workshop' : ''} #${category.toLowerCase().replace(/\s+/g, '')}`;
  
  return {
    filename: sessionFile.replace('.md', '-post.md'),
    content: post
  };
}

async function generateAllPosts() {
  const sessionsDir = path.join(__dirname, '../docs/sessions');
  const postsDir = path.join(__dirname, '../posts');
  
  const files = await fs.readdir(sessionsDir);
  const sessionFiles = files.filter(f => f.endsWith('.md') && f !== 'index.md');
  
  let generatedCount = 0;
  
  for (const file of sessionFiles) {
    try {
      const post = await generatePost(file);
      if (post) {
        const postPath = path.join(postsDir, post.filename);
        await fs.writeFile(postPath, post.content);
        console.log(`‚úÖ Generated: ${post.filename}`);
        generatedCount++;
      }
    } catch (error) {
      console.error(`‚ùå Error generating post for ${file}:`, error.message);
    }
  }
  
  console.log(`\nüìä Generated ${generatedCount} posts`);
}

// Run
console.log('üöÄ Generating improved speaker posts...');
generateAllPosts()
  .then(() => console.log('‚ú® All posts generated!'))
  .catch(error => console.error('üí• Generation failed:', error));